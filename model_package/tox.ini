# Tox is a generic virtualenv management and test command line tool. Its goal is to
# standardize testing in Python. 

# Using Tox we can (on multiple operating systems):
# + Eliminate PYTHONPATH challenges when running scripts/tests
# + Eliminate virtualenv setup confusion
# + Streamline steps such as model training, model publishing

[tox]
min_version = 4
envlist = test_package, checks
skipsdist = True

[testenv]
basepython = python
install_command = pip install {opts} {packages}
allowlist_externals = train,python
passenv =
	KAGGLE_USERNAME
	KAGGLE_KEY
	GEMFURY_PUSH_URL


# TEST PYTHON PACKAGE BASED ON PYTEST
[testenv:test_package]
allowlist_externals = python
deps =
	-rrequirements/test_requirements.txt
setenv =
	PYTHONPATH=.
	PYTHONHASHSEED=0
commands=
	python model/train_pipeline.py
	pytest \
	-s \
	-vv \
	{posargs:tests/}

[testenv:train]
envdir = {toxworkdir}/test_package
deps =
	{[testenv:test_package]deps}
setenv =
	{[testenv:test_package]setenv}
commands=
	python model/train_pipeline.py


# FETCH DATASET
[testenv:fetch_data]
envdir = {toxworkdir}/test_package
allowlist_externals = *
setenv =
	{[testenv:test_package]setenv}
commands=
	./scripts/fetch_data.sh


# PUBLISH MODEL TO CLOUD REPO (PyPI / Gemfurry)
[testenv:publish_model]
envdir = {toxworkdir}/test_package
allowlist_externals = *
deps =
	{[testenv:test_package]deps}
setenv =
	{[testenv:test_package]setenv}
commands=
	python model/train_pipeline.py
	./scripts/publish_model.sh .


# RUN CHECKS FOR LINTING etc.
[testenv:checks]
envdir = {toxworkdir}/checks
deps =
	-r{toxinidir}/requirements/typing_requirements.txt
commands =
	flake8 model tests
	isort model tests
	black model tests
	{posargs:mypy model}


[flake8]
exclude = .git,env
max-line-length = 90